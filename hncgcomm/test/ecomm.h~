/*
 *  Copyright (C) 2005-2006 Alo Sarv <madcat_@users.sourceforge.net>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __ECOMM_H__
#define __ECOMM_H__

#include <QtNetwork/QTcpSocket>
#include <qobject.h>
#include <string>
#include <vector>

class QTimer;
namespace Engine {
	class Main;
}

extern QString bytesToString(quint64 bytes);
extern QString secondsToString(qint64 sec, quint8 trunc);

class EngineComm : public QObject {
	Q_OBJECT
public:
	EngineComm();
	void connect(const QString &host, quint16 port);
	Engine::Main* getMain() const { return m_engine; }
	bool isConnected() const;
Q_SIGNALS:
	void connectionEstablished();
	void connectionLost();
private Q_SLOTS:
	void socketConnected();
	void socketError(QAbstractSocket::SocketError);
	void socketClosed();
	void newData();
	void tryReconnect();
private:
	void sendData(const std::string &data);
	void setGuiEnabled(bool state);

	QTcpSocket *m_socket;
	Engine::Main *m_engine;
	QTimer *m_reconnectTimer;
};


#endif
